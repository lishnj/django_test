pycharm配置python环境   file 》setting》project 》project interpreter

1.以#开头的语句是注释，多行注释
'''
'''

2.当语句以冒号:结尾时，缩进的语句视为代码块。
按照约定俗成的管理，应该始终坚持使用4个空格的缩进
if a >= 0:
    print(a)
else:
    print(-a)

3.大小写敏感

4.数据类型：整数int、浮点数、字符串、布尔值（and、or和not）、空值（None）、变量（变量不仅可以是数字，还可以是任意数据类型）
int(x [,base ])         将x转换为一个整数
long(x [,base ])        将x转换为一个长整数
float(x )               将x转换到一个浮点数
complex(real [,imag ])  创建一个复数
str(x )                 将对象 x 转换为字符串
repr(x )                将对象 x 转换为表达式字符串
eval(str )              用来计算在字符串中的有效Python表达式,并返回一个对象
tuple(s )               将序列 s 转换为一个元组
list(s )                将序列 s 转换为一个列表
chr(x )                 将一个整数转换为一个字符
unichr(x )              将一个整数转换为Unicode字符
ord(x )                 将一个字符转换为它的整数值
hex(x )                 将一个整数转换为一个十六进制字符串
oct(x )                 将一个整数转换为一个八进制字符串

5.全部大写的变量名表示常量

基本数据类型
1、数字  ---> int类
s = '123'
i = int(s)
print(i)

2、布尔值  --->bool类
True和False
#以下结果为假，即None、''、[]、()、{}以及 0
bool(None)  bool('')  bool([]) ...

3、字符串  --->str类
name ='little_five'

3.1、切片
name ="little-five"
name[1]   'i'
name[0:-2] #从第一个到倒数第二个，不包含倒数第二个，'little-fi'

3.2、索引--> index()、find()
name = "little_five"
print(name.index("l",2)) #结果为 4   #index-->获取索引，第二个参数指定获取该子字符或者子序列的第几个
print(name.find("l",2))  #结果也为 4  #find -->其作用与index相似
index()与find()的不同之处在于：若索引的该字符或者序列不在字符串内，对于index--》ValueError: substring not found，而对于find -->返回 -1。

3.3、长度 -->len()
name = "little_five"
#获取字符串的长度
print(len(name))  #输出为：>>> 11
len()方法-->同样可以用于其他数据类型，例如查看列表、元组以及字典中元素的多少

3.4. 删除 --> del
name ="little-five"
del name

3.5、 判断字符串内容 --> isalnum()、isalpha()、isdigit()　
a ="123"
a.isdigit()  #判断是否全为数字   #True
d.isalpha()  #判断是否全为字母   #False
e.isalnum()  #判断是否全为数字或者字母  #True

3.6 判断以什么开头结尾 --> startswith()、endswith()　


3.7
 join "-".join(name)
3.8 分割 --> split()
string = "www.gziscas.com.cn"
print(string.split('.'))     ['www', 'gziscas', 'com', 'cn']
print(string.split('.'，2))  ['www', 'gziscas', 'com.cn']

3.9 替代 -->replace  name.replace("l","L") name.replace("i","e",2)


6.列表  --->list类
列表是由一系列特定元素顺序排列的元素组成的，
它的元素可以是任何数据类型即数字、字符串、列表、元组、字典、布尔值等等，
同时其元素也是可修改的。
创建 a = list()   或   a = []
classmates = ['Michael', 'Bob', 'Tracy'] 
len(classmates)
classmates[2]
classmates[-2] 倒数第二个
classmates.append('Adam')  追加元素到末尾
classmates.insert(1, 'Jack')  把元素插入到指定的位置，比如索引号为1的位置
classmates.pop()   取出list末尾的元素
classmates.pop(1)  取出指定位置的元素，可将取出的值作为字符串赋予另外一个变量
classmates.remove('Bob')  del classmates[1]    删除
classmates[1] = 'Sarah'  要把某个元素替换成别的元素
name[0:-1]  name[1:]    name[:-1]   切片，左闭右开，前面不写表示包含前面所有元素,后面不写则表示后面所有元素
sorted(num)   sorted(num,reverse=True)  排序，默认正序,加入reverse =True，则表示倒序
L = ['Apple', 123, True]  里面的元素的数据类型也可以不同
s = ['python', 'java', ['asp', 'php'], 'scheme']   list元素也可以是另一个list

遍历 list = ['html', 'js', 'css', 'python']
 # 方法1
 print '遍历列表方法1：'
 for i in list:
     print ("序号：%s   值：%s" % (list.index(i) + 1, i))

 print '\n遍历列表方法2：'
 # 方法2
 for i in range(len(list)):
     print ("序号：%s   值：%s" % (i + 1, list[i]))

 # 方法3
 print '\n遍历列表方法3：'
 for i, val in enumerate(list):
     print ("序号：%s   值：%s" % (i + 1, val))

 # 方法3
 print '\n遍历列表方法3 （设置遍历开始初始位置，只改变了起始序号）：'
 for i, val in enumerate(list, 2):
     print ("序号：%s   值：%s" % (i + 1, val))

7.元组  --->tuple类
元组即为不可修改的列表。其于特性跟list相似。其使用圆括号而不是方括号来标识。
classmates = ('Michael', 'Bob', 'Tracy')
print(classmates[0])
t = (1, 2)
 t = ()  空的
 t = (1,)  只有1个元素的tuple定义时必须加一个逗号,，来消除歧义

9.字典  --->dict类
字典为一系列的键-值对，每个键值对用逗号隔开，每个键都与一个值相对应，可以通过使用键来访问对应的值。无序的。
键的定义必须是不可变的，即可以是数字、字符串也可以是元组，还有布尔值等。
而值的定义可以是任意数据类型。
#字典的定义
a = dict()  或   a = {}
info ={
    1:"hello world",  #键为数字
    ("hello world"):1, #键为元组
    False:{
        "name":"James"
    },
    "age":22
}
person = {'name':'xiaoming', 'age':18}
person['city'] # 第一种 若键不存在则会抛出KeyError异常，通过in判断key是否存在'Thomas' in d
person.get('city',"上海") # 第二种 不会抛出异常，不存在则返回None,也可以设置默认返回值
person.setdefault('city', '上海') # 第三种 与第二种类似，区别在于setdefault方法会更新字典
要删除一个key，用pop(key)方法，对应的value也会从dict中删除：
 d.pop('Bob')

 遍历
 a = {'a': '1', 'b': '2', 'c': '3'}
 （1）遍历key值,效率高
for key in a:
    print(key+':'+a[key])
（2）遍历value值
for value in a.values():
       print(value)
（3）遍历字典项
for kv in a.items():
       print(kv)   ('a', '1') ('b', '2') ('c', '3')
（4）遍历字典健值，效率低
for key,value in a.items():
       print(key+':'+value)
完全等价于
for (key,value) in a.items():

 10.集合 -->set类
 key不能重复,重复元素在set中自动被过滤. 无序
 s = set([1, 2, 3])
 add(key)方法可以添加元素到set中
 通过remove(key)方法可以删除元素
 names ={"zhangsan","lisi","wangwu","alex","james"}
 names.remove("lisi") #指定删除，若要删除的元素不存在，则报错
 names.discard("hello") #指定删除，若要删除的元素不存在，无视该方法

 11.定义一个函数要使用def语句
 def my_abs(x):
    if x >= 0:
        return x
    else:
        return -x
    如果没有return语句，函数执行完毕后也会返回结果，只是结果为None。return None可以简写为return。
    空函数 如果想定义一个什么事也不做的空函数，可以用pass语句
    def nop():
        pass
返回多个值
def move(x, y, step, angle=0):
    nx = x + step * math.cos(angle)
    ny = y - step * math.sin(angle)
    return nx, ny
x, y = move(100, 100, 60, math.pi / 6)
print(x, y)
其实这只是一种假象，Python函数返回的仍然是单一值. 原来返回值是一个tuple

参数传递：传不可变对象和传可变对象
strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象
    不可变类型：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。
    可变类型：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。

调用：   参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。
        关键字参数，不需要使用指定顺序： printinfo( age=50, name="runoob" )
8.循环
names = ['Michael', 'Bob', 'Tracy']
for name in names:
    print(name)

sum = 0
n = 99
while n > 0:
    sum = sum + n
    n = n - 2
print(sum)

break  continue

12.默认参数
power(x, n)
def power(x, n=2):
当我们调用power(5)时，相当于调用power(5, 2)：
一是必选参数在前，默认参数在后
 定义默认参数要牢记一点：默认参数必须指向不变对象！ 

14列表生成式
[x * x for x in range(1, 11)]

导入模块
import sys
导入其它py文件
import support
support.print_func("Runoob") #现在可以调用模块里包含的函数了

from … import 语句
Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中，语法如下：
from fibo import fib  #要导入模块 fibo 的 fib 函数

__name__属性
一个模块被另一个程序第一次引入时，其主程序将运行。
如果我们想在模块被引入时，模块中的某一程序块不执行，
我们可以用__name__属性来使该程序块仅在该模块自身运行时执行。
if __name__ == '__main__':
   print('程序自身在运行')
else:
   print('我来自另一模块')

格式化输出%s %d 占位符
1.打印字符串  print ("His name is %s"%("Aviad"))
2.打印整数  print ("He is %d years old"%(25))
3.打印浮点数  print ("His height is %f m"%(1.83))
4.打印浮点数（指定保留小数点位数）  print ("His height is %.2f m"%(1.83))
5.指定占位符宽度（右侧对齐。左侧补空格）  print ("Name:%10s Age:%8d Height:%8.2f"%("Aviad",25,1.83))
6.指定占位符宽度（左侧对齐。右侧补空格）  print ("Name:%-10s Age:%-8d Height:%-8.2f"%("Aviad",25,1.83))

用cmd进入python的安装目录的sripts文件夹下，输入
pip install numpy -i http://pypi.douban.com/simple --trusted-host pypi.douban.com
pip3 install flask

卸载包
pip uninstall xlrd -y

查看包
pip list

快速生成requirement.txt的安装文件
requirements.txt

安装所需要的文件
pip install -r requirement.txt